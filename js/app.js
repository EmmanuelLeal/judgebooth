// Generated by CoffeeScript 1.8.0
(function() {
  var boothApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  boothApp = angular.module('judgebooth', ['ionic', 'angular-cache', 'pascalprecht.translate', 'boothServices']);

  boothApp.config([
    '$locationProvider', '$stateProvider', '$urlRouterProvider', function($locationProvider, $stateProvider, $urlRouterProvider) {
      $locationProvider.html5Mode(!ionic.Platform.isWebView());
      $stateProvider.state('home', {
        url: '/',
        templateUrl: 'views/home.html',
        controller: 'HomeCtrl',
        resolve: {
          questions: [
            'questionsAPI', function(questionsAPI) {
              return questionsAPI.questions();
            }
          ],
          sets: [
            'questionsAPI', function(questionsAPI) {
              return questionsAPI.sets();
            }
          ]
        }
      }).state('question', {
        url: '/question/:id',
        templateUrl: 'views/question.html',
        controller: 'QuestionCtrl',
        resolve: {
          question: [
            'questionsAPI', '$stateParams', function(questionsAPI, $stateParams) {
              return questionsAPI.question($stateParams.id);
            }
          ]
        }
      });
      return $urlRouterProvider.otherwise('/');
    }
  ]);

  boothApp.run([
    'questionsAPI', '$rootScope', '$state', function(questionsAPI, $rootScope, $state) {
      $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
        return $rootScope.state = toState;
      });
      return $rootScope.next = function() {
        return questionsAPI.questions().then(function(response) {
          var questions;
          questions = response.data;
          return $state.go("question", {
            id: questions[Math.floor(Math.random() * questions.length)].id
          });
        });
      };
    }
  ]);

  boothApp.controller('SideCtrl', [
    "$scope", "questionsAPI", function($scope, questionsAPI) {
      $scope.languages = questionsAPI.languages();
      $scope.languageCounts = {};
      questionsAPI.sets().then(function(response) {
        return $scope.sets = response.data;
      });
      questionsAPI.questions().then(function(response) {
        var card, language, question, set, sets, _base, _base1, _base2, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
        $scope.questions = response.data;
        $scope.setCounts = {};
        _ref = $scope.questions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          question = _ref[_i];
          sets = [];
          _ref1 = question.cards;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            card = _ref1[_j];
            for (_k = 0, _len2 = card.length; _k < _len2; _k++) {
              set = card[_k];
              if (__indexOf.call(sets, set) < 0) {
                sets.push(set);
              }
            }
          }
          _ref2 = question.languages;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            language = _ref2[_l];
            (_base = $scope.languageCounts)[language] || (_base[language] = 0);
            $scope.languageCounts[language]++;
            for (_m = 0, _len4 = sets.length; _m < _len4; _m++) {
              set = sets[_m];
              (_base1 = $scope.setCounts)[language] || (_base1[language] = {});
              (_base2 = $scope.setCounts[language])[set] || (_base2[set] = 0);
              $scope.setCounts[language][set]++;
            }
          }
        }
        return $scope.updateCount();
      });
      $scope.filter = {
        language: 1,
        sets: {},
        difficulty: []
      };
      $scope.toggleSet = function(id) {
        var set, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        switch (id) {
          case "all":
            $scope.filter.sets = {};
            break;
          case "standard":
            _ref = $scope.sets;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              set = _ref[_i];
              $scope.filter.sets[set.id] = !set.standard;
            }
            break;
          case "modern":
            _ref1 = $scope.sets;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              set = _ref1[_j];
              $scope.filter.sets[set.id] = !set.modern;
            }
            break;
          case "none":
            _ref2 = $scope.sets;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              set = _ref2[_k];
              $scope.filter.sets[set.id] = true;
            }
            break;
          default:
            $scope.filter.sets[id] = !$scope.filter.sets[id];
        }
        return $scope.updateCount();
      };
      $scope.toggleDifficulty = function(level) {
        if (__indexOf.call($scope.filter.difficulty, level) >= 0) {
          $scope.filter.difficulty.splice($scope.filter.difficulty.indexOf(level), 1);
        } else {
          $scope.filter.difficulty.push(level);
        }
        return $scope.updateCount();
      };
      return $scope.updateCount = function() {
        var isOn, set, _ref, _results;
        questionsAPI.filterQuestions($scope.filter).then(function(questions) {
          return $scope.count = questions.length;
        });
        $scope.setCount = Object.keys($scope.setCounts[$scope.filter.language]).length;
        _ref = $scope.filter.sets;
        _results = [];
        for (set in _ref) {
          isOn = _ref[set];
          if (isOn && $scope.setCounts[$scope.filter.language][set]) {
            _results.push($scope.setCount--);
          }
        }
        return _results;
      };
    }
  ]);

  boothApp.controller('HomeCtrl', [
    "$scope", "questions", "sets", function($scope, questions, sets) {
      $scope.questions = questions.data;
      return $scope.sets = sets.data;
    }
  ]);

  boothApp.controller('QuestionCtrl', [
    "$scope", "question", function($scope, question) {
      $scope.question = question;
      return $scope.showAnswer = function() {
        return $scope.answer = true;
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=app.js.map
